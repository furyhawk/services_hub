# coding: utf-8

"""
    Merged API Services

    This is a merged OpenAPI specification containing multiple API services

    The version of the OpenAPI document: 2025.05.17
    Contact: feedback@data.gov.sg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.weather_get200_response_data_records_inner_item_readings_inner_location import WeatherGet200ResponseDataRecordsInnerItemReadingsInnerLocation
from openapi_server.models.weather_get200_response_data_records_inner_item_readings_inner_station import WeatherGet200ResponseDataRecordsInnerItemReadingsInnerStation
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WeatherGet200ResponseDataRecordsInnerItemReadingsInner(BaseModel):
    """
    WeatherGet200ResponseDataRecordsInnerItemReadingsInner
    """ # noqa: E501
    location: Optional[WeatherGet200ResponseDataRecordsInnerItemReadingsInnerLocation] = None
    datetime: Optional[StrictStr] = Field(default=None, description="The date and time when the weather reading was taken, formatted in ISO 8601.")
    text: Optional[StrictStr] = Field(default=None, description="A textual description of the weather event, which can include types such as \"Cloud to Cloud\" or \"Cloud to Ground.\"")
    type: Optional[StrictStr] = Field(default=None, description="The type of lightning event, which can be either \"C\" for Cloud to Cloud or \"G\" for Cloud to Ground.")
    station: Optional[WeatherGet200ResponseDataRecordsInnerItemReadingsInnerStation] = None
    heat_stress: Optional[StrictStr] = Field(default=None, description="A string indicating the level of heat stress at the location", alias="heatStress")
    wbgt: Optional[StrictStr] = Field(default=None, description="Wet Bulb Globe Temperature value at the station")
    __properties: ClassVar[List[str]] = ["location", "datetime", "text", "type", "station", "heatStress", "wbgt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WeatherGet200ResponseDataRecordsInnerItemReadingsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of station
        if self.station:
            _dict['station'] = self.station.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WeatherGet200ResponseDataRecordsInnerItemReadingsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "location": WeatherGet200ResponseDataRecordsInnerItemReadingsInnerLocation.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "datetime": obj.get("datetime"),
            "text": obj.get("text"),
            "type": obj.get("type"),
            "station": WeatherGet200ResponseDataRecordsInnerItemReadingsInnerStation.from_dict(obj.get("station")) if obj.get("station") is not None else None,
            "heatStress": obj.get("heatStress"),
            "wbgt": obj.get("wbgt")
        })
        return _obj


