# coding: utf-8

"""
    Merged API Services

    This is a merged OpenAPI specification containing multiple API services

    The version of the OpenAPI document: 2025.05.17
    Contact: feedback@data.gov.sg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.four_day_outlook_get200_response_data_records_inner_forecasts_inner_forecast import FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerForecast
from openapi_server.models.four_day_outlook_get200_response_data_records_inner_forecasts_inner_relative_humidity import FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerRelativeHumidity
from openapi_server.models.four_day_outlook_get200_response_data_records_inner_forecasts_inner_temperature import FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerTemperature
from openapi_server.models.four_day_outlook_get200_response_data_records_inner_forecasts_inner_wind import FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerWind
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FourDayOutlookGet200ResponseDataRecordsInnerForecastsInner(BaseModel):
    """
    FourDayOutlookGet200ResponseDataRecordsInnerForecastsInner
    """ # noqa: E501
    timestamp: Optional[StrictStr] = None
    temperature: Optional[FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerTemperature] = None
    relative_humidity: Optional[FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerRelativeHumidity] = Field(default=None, alias="relativeHumidity")
    forecast: Optional[FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerForecast] = None
    day: Optional[StrictStr] = None
    wind: Optional[FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerWind] = None
    __properties: ClassVar[List[str]] = ["timestamp", "temperature", "relativeHumidity", "forecast", "day", "wind"]

    @field_validator('day')
    def day_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday',):
            raise ValueError("must be one of enum values ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FourDayOutlookGet200ResponseDataRecordsInnerForecastsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of temperature
        if self.temperature:
            _dict['temperature'] = self.temperature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relative_humidity
        if self.relative_humidity:
            _dict['relativeHumidity'] = self.relative_humidity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of forecast
        if self.forecast:
            _dict['forecast'] = self.forecast.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wind
        if self.wind:
            _dict['wind'] = self.wind.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FourDayOutlookGet200ResponseDataRecordsInnerForecastsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timestamp": obj.get("timestamp"),
            "temperature": FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerTemperature.from_dict(obj.get("temperature")) if obj.get("temperature") is not None else None,
            "relativeHumidity": FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerRelativeHumidity.from_dict(obj.get("relativeHumidity")) if obj.get("relativeHumidity") is not None else None,
            "forecast": FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerForecast.from_dict(obj.get("forecast")) if obj.get("forecast") is not None else None,
            "day": obj.get("day"),
            "wind": FourDayOutlookGet200ResponseDataRecordsInnerForecastsInnerWind.from_dict(obj.get("wind")) if obj.get("wind") is not None else None
        })
        return _obj


