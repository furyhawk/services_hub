# generated by fastapi-codegen:
#   filename:  specs/merged-api-spec.json
#   timestamp: 2025-05-17T13:21:06+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class LabelLocation(BaseModel):
    latitude: Optional[float] = Field(None, examples=[1.375])
    longitude: Optional[float] = Field(None, examples=[103.839])


class AreaMetadatum(BaseModel):
    name: Optional[str] = Field(
        None, description='Name of the area', examples=['Ang Mo Kio']
    )
    label_location: Optional[LabelLocation] = Field(
        None,
        description='Provides longitude and latitude for placing readings on a map',
    )


class ValidPeriod(BaseModel):
    start: Optional[str] = Field(None, examples=['2024-07-16T16:30:00.000Z'])
    end: Optional[str] = Field(None, examples=['2024-07-16T18:30:00.000Z'])
    text: Optional[str] = Field(None, examples=['12.30 am to 2.30 am'])


class Temperature(BaseModel):
    low: Optional[float] = Field(None, examples=[26])
    high: Optional[float] = Field(None, examples=[36])
    unit: Optional[str] = Field(None, examples=['Degrees Celsius'])


class RelativeHumidity(BaseModel):
    low: Optional[float] = Field(None, examples=[55])
    high: Optional[float] = Field(None, examples=[90])
    unit: Optional[str] = Field(None, examples=['Percentage'])


class Text(Enum):
    Fair = 'Fair'
    Fair__Day_ = 'Fair (Day)'
    Fair__Night_ = 'Fair (Night)'
    Fair_and_Warm = 'Fair and Warm'
    Partly_Cloudy = 'Partly Cloudy'
    Partly_Cloudy__Day_ = 'Partly Cloudy (Day)'
    Partly_Cloudy__Night_ = 'Partly Cloudy (Night)'
    Cloudy = 'Cloudy'
    Hazy = 'Hazy'
    Slightly_Hazy = 'Slightly Hazy'
    Windy = 'Windy'
    Mist = 'Mist'
    Fog = 'Fog'
    Light_Rain = 'Light Rain'
    Moderate_Rain = 'Moderate Rain'
    Heavy_Rain = 'Heavy Rain'
    Passing_Showers = 'Passing Showers'
    Light_Showers = 'Light Showers'
    Showers = 'Showers'
    Heavy_Showers = 'Heavy Showers'
    Thundery_Showers = 'Thundery Showers'
    Heavy_Thundery_Showers = 'Heavy Thundery Showers'
    Heavy_Thundery_Showers_with_Gusty_Winds = 'Heavy Thundery Showers with Gusty Winds'


class Forecast(BaseModel):
    code: Optional[str] = None
    text: Optional[Text] = None


class Speed(BaseModel):
    low: Optional[float] = Field(None, examples=[15])
    high: Optional[float] = Field(None, examples=[30])


class Wind(BaseModel):
    speed: Optional[Speed] = Field(
        None, description='Unit of measure - Kilometeres per hour'
    )
    direction: Optional[str] = Field(None, examples=['SSE'])


class General(BaseModel):
    validPeriod: Optional[ValidPeriod] = Field(
        None, description='Period of time the forecast is valid for'
    )
    temperature: Optional[Temperature] = Field(
        None, description='Unit of measure - Degrees Celsius'
    )
    relativeHumidity: Optional[RelativeHumidity] = Field(
        None, description='Unit of measure - Percentage'
    )
    forecast: Optional[Forecast] = None
    wind: Optional[Wind] = None


class TimePeriod(BaseModel):
    start: Optional[str] = Field(None, examples=['2024-07-16T16:30:00.000Z'])
    end: Optional[str] = Field(None, examples=['2024-07-16T18:30:00.000Z'])
    text: Optional[str] = Field(None, examples=['12.30 am to 2.30 am'])


class West(BaseModel):
    code: Optional[str] = None
    text: Optional[Text] = None


class East(BaseModel):
    code: Optional[str] = None
    text: Optional[Text] = None


class Central(BaseModel):
    code: Optional[str] = None
    text: Optional[Text] = None


class North(BaseModel):
    code: Optional[str] = None
    text: Optional[Text] = None


class South(BaseModel):
    code: Optional[str] = None
    text: Optional[Text] = None


class Regions(BaseModel):
    west: Optional[West] = None
    east: Optional[East] = None
    central: Optional[Central] = None
    north: Optional[North] = None
    south: Optional[South] = None


class Period(BaseModel):
    timePeriod: Optional[TimePeriod] = Field(
        None, description='Period of time the forecast is valid for'
    )
    regions: Optional[Regions] = None


class Record(BaseModel):
    date: Optional[str] = Field(None, examples=['2024-07-15T00:00:00.000Z'])
    updatedTimestamp: Optional[str] = Field(
        None,
        description='Time of acquisition of data from NEA',
        examples=['2024-07-15T15:04:00.000Z'],
    )
    tiemstamp: Optional[str] = Field(
        None,
        description='Time forecast was issued by NEA',
        examples=['2024-07-15T15:04:00.000Z'],
    )
    general: Optional[General] = Field(
        None, description='A general weather forecast for the 24 hour period'
    )
    periods: Optional[List[Period]] = Field(
        None, description='Forecasts for various areas in Singapore'
    )


class Data(BaseModel):
    area_metadata: Optional[List[AreaMetadatum]] = None
    records: Optional[List[Record]] = None
    paginationToken: Optional[str] = Field(
        None,
        description='Token to retrieve next page if exists',
        examples=[
            'b2Zmc2V0PTEwMA== (you will see this token only if next page exists)'
        ],
    )


class TwentyFourHrForecastGetResponse(BaseModel):
    code: Optional[int] = Field(
        None, description='Response status code (always 0 for success)'
    )
    errorMsg: Optional[str] = Field(
        None, description='Error message (empty string for success)', examples=[None]
    )
    data: Optional[Data] = None


class ErrorMsg(Enum):
    Invalid_date_format__Date_format_must_be_YYYY_MM_DD__2024_06_01__or_YYYY_MM_DDTHH_mm_ss__2024_06_01T08_30_00__ = 'Invalid date format. Date format must be YYYY-MM-DD (2024-06-01) or YYYY-MM-DDTHH:mm:ss (2024-06-01T08:30:00).'
    Invalid_pagination_token_ = 'Invalid pagination token.'


class TwentyFourHrForecastGetResponse1(BaseModel):
    code: Optional[float] = Field(None, examples=[4])
    name: Optional[str] = Field(None, examples=['ERROR_PARAMS'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[ErrorMsg] = None


class TwentyFourHrForecastGetResponse2(BaseModel):
    code: Optional[float] = Field(None, examples=[17])
    name: Optional[str] = Field(None, examples=['REAL_TIME_API_DATA_NOT_FOUND'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[str] = Field(None, examples=['Data not found'])


class AreaMetadatum1(BaseModel):
    name: Optional[str] = Field(
        None, description='Name of the area', examples=['Ang Mo Kio']
    )
    label_location: Optional[LabelLocation] = Field(
        None,
        description='Provides longitude and latitude for placing readings on a map',
    )


class Forecast2(Enum):
    Fair = 'Fair'
    Fair__Day_ = 'Fair (Day)'
    Fair__Night_ = 'Fair (Night)'
    Fair_and_Warm = 'Fair and Warm'
    Partly_Cloudy = 'Partly Cloudy'
    Partly_Cloudy__Day_ = 'Partly Cloudy (Day)'
    Partly_Cloudy__Night_ = 'Partly Cloudy (Night)'
    Cloudy = 'Cloudy'
    Hazy = 'Hazy'
    Slightly_Hazy = 'Slightly Hazy'
    Windy = 'Windy'
    Mist = 'Mist'
    Fog = 'Fog'
    Light_Rain = 'Light Rain'
    Moderate_Rain = 'Moderate Rain'
    Heavy_Rain = 'Heavy Rain'
    Passing_Showers = 'Passing Showers'
    Light_Showers = 'Light Showers'
    Showers = 'Showers'
    Heavy_Showers = 'Heavy Showers'
    Thundery_Showers = 'Thundery Showers'
    Heavy_Thundery_Showers = 'Heavy Thundery Showers'
    Heavy_Thundery_Showers_with_Gusty_Winds = 'Heavy Thundery Showers with Gusty Winds'


class Forecast1(BaseModel):
    area: Optional[str] = Field(None, examples=['Ang Mo Kio'])
    forecast: Optional[Forecast2] = None


class Item(BaseModel):
    updated_timestamp: Optional[str] = Field(
        None,
        description='Time of acquisition of data from NEA',
        examples=['2024-07-17T05:05:54.000Z'],
    )
    timestamp: Optional[str] = Field(
        None,
        description='Time forecast was issued by NEA',
        examples=['2024-07-17T04:59:00.000Z'],
    )
    valid_period: Optional[ValidPeriod] = Field(
        None, description='Period of time the forecast is valid for'
    )
    forecasts: Optional[List[Forecast1]] = Field(
        None, description='Forecasts for various areas in Singapore'
    )


class Data1(BaseModel):
    area_metadata: Optional[List[AreaMetadatum1]] = None
    items: Optional[List[Item]] = None
    paginationToken: Optional[str] = Field(
        None,
        description='Token to retrieve next page if exists',
        examples=[
            'b2Zmc2V0PTEwMA== (you will see this token only if next page exists)'
        ],
    )


class TwoHrForecastGetResponse(BaseModel):
    code: Optional[int] = Field(
        None, description='Response status code (always 0 for success)'
    )
    errorMsg: Optional[str] = Field(
        None, description='Error message (empty string for success)', examples=[None]
    )
    data: Optional[Data1] = None


class TwoHrForecastGetResponse1(BaseModel):
    code: Optional[float] = Field(None, examples=[4])
    name: Optional[str] = Field(None, examples=['ERROR_PARAMS'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[ErrorMsg] = None


class TwoHrForecastGetResponse2(BaseModel):
    code: Optional[float] = Field(None, examples=[17])
    name: Optional[str] = Field(None, examples=['REAL_TIME_API_DATA_NOT_FOUND'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[str] = Field(None, examples=['Data not found'])


class Temperature1(BaseModel):
    low: Optional[float] = Field(None, examples=[26])
    high: Optional[float] = Field(None, examples=[33])
    unit: Optional[str] = Field(None, examples=['Degrees Celsius'])


class RelativeHumidity1(BaseModel):
    low: Optional[float] = Field(None, examples=[50])
    high: Optional[float] = Field(None, examples=[80])
    unit: Optional[str] = Field(None, examples=['Percentage'])


class Forecast4(BaseModel):
    summary: Optional[str] = Field(None, examples=['Fair and occasionally windy'])
    code: Optional[str] = Field(None, examples=['FA'])
    text: Optional[Text] = None


class Day(Enum):
    Monday = 'Monday'
    Tuesday = 'Tuesday'
    Wednesday = 'Wednesday'
    Thursday = 'Thursday'
    Friday = 'Friday'
    Saturday = 'Saturday'
    Sunday = 'Sunday'


class Speed1(BaseModel):
    low: Optional[float] = Field(None, examples=[35])
    high: Optional[float] = Field(None, examples=[40])


class Wind1(BaseModel):
    speed: Optional[Speed1] = Field(
        None, description='Unit of measure - Kilometeres per hour'
    )
    direction: Optional[str] = Field(None, examples=['SSE'])


class Forecast3(BaseModel):
    timestamp: Optional[str] = Field(None, examples=['2024-07-17T16:00:00.000Z'])
    temperature: Optional[Temperature1] = Field(
        None, description='Unit of measure - Degrees Celsius'
    )
    relativeHumidity: Optional[RelativeHumidity1] = Field(
        None, description='Unit of measure - Percentage'
    )
    forecast: Optional[Forecast4] = None
    day: Optional[Day] = None
    wind: Optional[Wind1] = None


class Record1(BaseModel):
    date: Optional[str] = Field(None, examples=['2024-07-17T00:00:00.000Z'])
    updatedTimestamp: Optional[str] = Field(None, examples=['2024-07-16T21:20:50.000Z'])
    timestamp: Optional[str] = Field(None, examples=['2024-07-16T21:17:00.000Z'])
    forecasts: Optional[List[Forecast3]] = Field(
        None, description='Forecast summary for the day'
    )


class Data2(BaseModel):
    records: Optional[List[Record1]] = None


class FourDayOutlookGetResponse(BaseModel):
    code: Optional[int] = Field(
        None, description='Response status code (always 0 for success)'
    )
    errorMsg: Optional[str] = Field(
        None, description='Error message (empty string for success)', examples=[None]
    )
    data: Optional[Data2] = Field(
        None, description='Chronologically ordered forecasts for the next 4 days'
    )


class FourDayOutlookGetResponse1(BaseModel):
    code: Optional[float] = Field(None, examples=[4])
    name: Optional[str] = Field(None, examples=['ERROR_PARAMS'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[ErrorMsg] = None


class FourDayOutlookGetResponse2(BaseModel):
    code: Optional[float] = Field(None, examples=[17])
    name: Optional[str] = Field(None, examples=['REAL_TIME_API_DATA_NOT_FOUND'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[str] = Field(None, examples=['Data not found'])


class LabelLocation2(BaseModel):
    latitude: Optional[float] = Field(
        None, description='Latitude coordinate of the region label', examples=[1.2799]
    )
    longitude: Optional[float] = Field(
        None,
        description='Longitude coordinate of the region label',
        examples=[103.8703],
    )


class Station(BaseModel):
    id: Optional[str] = Field(None, description="Station's ID", examples=['S108'])
    deviceId: Optional[str] = Field(
        None,
        description="Reading Device's ID (usually same as Station's ID)",
        examples=['S108'],
    )
    name: Optional[str] = Field(
        None, description="Station's name", examples=['Marina Gardens Drive']
    )
    labelLocation: Optional[LabelLocation2] = None


class Datum(BaseModel):
    stationId: Optional[str] = Field(None, examples=['S108'])
    value: Optional[float] = Field(None, examples=[29])


class Reading(BaseModel):
    timestamp: Optional[str] = Field(None, examples=['2024-07-16T15:59:00.000Z'])
    data: Optional[List[Datum]] = None


class Data3(BaseModel):
    stations: Optional[List[Station]] = None
    readings: Optional[List[Reading]] = None
    readingType: Optional[str] = Field(
        None, description='Information about the reading', examples=['DBT 1M F']
    )
    readingUnit: Optional[str] = Field(
        None, description='Measurement unit for reading', examples=['deg code']
    )
    paginationToken: Optional[str] = Field(
        None,
        description='Token to retrieve next page if exists',
        examples=[
            'b2Zmc2V0PTEwMA== (you will see this token only if next page exists)'
        ],
    )


class AirTemperatureGetResponse(BaseModel):
    code: Optional[int] = Field(
        None, description='Response status code (always 0 for success)'
    )
    errorMsg: Optional[str] = Field(
        None, description='Error message (empty string for success)', examples=[None]
    )
    data: Optional[Data3] = None


class AirTemperatureGetResponse1(BaseModel):
    code: Optional[float] = Field(None, examples=[4])
    name: Optional[str] = Field(None, examples=['ERROR_PARAMS'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[ErrorMsg] = None


class AirTemperatureGetResponse2(BaseModel):
    code: Optional[float] = Field(None, examples=[17])
    name: Optional[str] = Field(None, examples=['REAL_TIME_API_DATA_NOT_FOUND'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[str] = Field(None, examples=['Data not found'])


class Location(BaseModel):
    latitude: Optional[str] = Field(
        None,
        description='The latitude coordinate of the location, represented as a string.',
        examples=['1.1700'],
    )
    longtitude: Optional[str] = Field(
        None,
        description='The longitude coordinate of the location, represented as a string.',
        examples=['103.8718'],
    )


class Station1(BaseModel):
    name: Optional[str] = Field(
        None, description='Station name', examples=['Upper Changi Road North']
    )
    id: Optional[str] = Field(None, description='Station ID', examples=['S124'])
    townCenter: Optional[str] = Field(None, examples=['Changi'])


class Reading1(BaseModel):
    location: Optional[Location] = None
    datetime: Optional[str] = Field(
        None,
        description='The date and time when the weather reading was taken, formatted in ISO 8601.',
        examples=['2025-02-07T19:16:44.004+08:00'],
    )
    text: Optional[str] = Field(
        None,
        description='A textual description of the weather event, which can include types such as "Cloud to Cloud" or "Cloud to Ground."',
        examples=['Cloud to Cloud'],
    )
    type: Optional[str] = Field(
        None,
        description='The type of lightning event, which can be either "C" for Cloud to Cloud or "G" for Cloud to Ground.',
        examples=['C'],
    )
    station: Optional[Station1] = None
    heatStress: Optional[str] = Field(
        None,
        description='A string indicating the level of heat stress at the location',
        examples=['Low'],
    )
    wbgt: Optional[str] = Field(
        None,
        description='Wet Bulb Globe Temperature value at the station',
        examples=['26.9'],
    )


class Item1(BaseModel):
    type: Optional[str] = Field(
        None,
        description='Type of the weather information (`observation` or `forecast`). WBGT is always `observation.',
        examples=['observation'],
    )
    isStationData: Optional[bool] = Field(
        None,
        description='Indicates whether the weather information includes station information.',
        examples=[True],
    )
    readings: Optional[List[Reading1]] = None


class Record2(BaseModel):
    datetime: Optional[str] = Field(
        None,
        description='Time the observasation was issued by NEA',
        examples=['2025-02-07T20:38:00+08:00'],
    )
    item: Optional[Item1] = Field(
        None, description='A weather observation for the WBGT'
    )
    updatedTimestamp: Optional[str] = Field(
        None,
        description='Time of acquisition of data from NEA',
        examples=['2025-02-07T20:40:12+08:00'],
    )


class Data4(BaseModel):
    records: Optional[List[Record2]] = None
    paginationToken: Optional[str] = Field(
        None,
        description='Token to retrieve next page if exists',
        examples=[
            'b2Zmc2V0PTEwMA== (you will see this token only if next page exists)'
        ],
    )


class WeatherGetResponse(BaseModel):
    code: Optional[int] = Field(
        None, description='Response status code (always 0 for success)'
    )
    errorMsg: Optional[str] = Field(
        None, description='Error message (empty string for success)', examples=['']
    )
    data: Optional[Data4] = None


class ErrorMsg4(Enum):
    Invalid_date_format__Date_format_must_be_YYYY_MM_DD__2025_02_01__or_YYYY_MM_DDTHH_mm_ss__2025_02_01T08_30_00__ = 'Invalid date format. Date format must be YYYY-MM-DD (2025-02-01) or YYYY-MM-DDTHH:mm:ss (2025-02-01T08:30:00).'
    Invalid_pagination_token_ = 'Invalid pagination token.'


class WeatherGetResponse1(BaseModel):
    code: Optional[float] = Field(None, examples=[4])
    name: Optional[str] = Field(None, examples=['ERROR_PARAMS'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[ErrorMsg4] = None


class WeatherGetResponse2(BaseModel):
    code: Optional[float] = Field(None, examples=[17])
    name: Optional[str] = Field(None, examples=['REAL_TIME_API_DATA_NOT_FOUND'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[str] = Field(None, examples=['Data not found'])


class LabelLocation3(BaseModel):
    latitude: Optional[float] = Field(
        None, description='Latitude coordinate of the region label', examples=[1.36491]
    )
    longitude: Optional[float] = Field(
        None,
        description='Longitude coordinate of the region label',
        examples=[103.75065],
    )


class Station2(BaseModel):
    id: Optional[str] = Field(None, description="Station's ID", examples=['S117'])
    deviceId: Optional[str] = Field(
        None,
        description="Reading Device's ID (usually same as Station's ID)",
        examples=['S117'],
    )
    name: Optional[str] = Field(
        None, description="Station's name", examples=['Banyan Road']
    )
    labelLocation: Optional[LabelLocation3] = None


class Datum1(BaseModel):
    stationId: Optional[str] = Field(None, examples=['S117'])
    value: Optional[float] = Field(None, examples=[148])


class Reading2(BaseModel):
    timestamp: Optional[str] = Field(None, examples=['2024-07-17T14:00:00.000Z'])
    data: Optional[List[Datum1]] = None


class Data5(BaseModel):
    stations: Optional[List[Station2]] = None
    readings: Optional[List[Reading2]] = None
    readingType: Optional[str] = Field(
        None,
        description='Information about the reading',
        examples=['Wind Dir AVG (S) 10M M1M'],
    )
    readingUnit: Optional[str] = Field(
        None, description='Measurement unit for reading', examples=['degrees']
    )
    paginationToken: Optional[str] = Field(
        None,
        description='Token to retrieve next page if exists',
        examples=[
            'b2Zmc2V0PTEwMA== (you will see this token only if next page exists)'
        ],
    )


class WindDirectionGetResponse(BaseModel):
    code: Optional[int] = Field(
        None, description='Response status code (always 0 for success)'
    )
    errorMsg: Optional[str] = Field(
        None, description='Error message (empty string for success)', examples=[None]
    )
    data: Optional[Data5] = None


class ErrorMsg5(Enum):
    Invalid_date_format__Date_format_must_be_YYYY_MM_DD__2024_06_01__or_YYYY_MM_DDTHH_mm_ss__2024_06_01T08_30_00__ = 'Invalid date format. Date format must be YYYY-MM-DD (2024-06-01) or YYYY-MM-DDTHH:mm:ss (2024-06-01T08:30:00).'
    Invalid_pagination_token_ = 'Invalid pagination token.'


class WindDirectionGetResponse1(BaseModel):
    code: Optional[float] = Field(None, examples=[4])
    name: Optional[str] = Field(None, examples=['ERROR_PARAMS'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[ErrorMsg5] = None


class WindDirectionGetResponse2(BaseModel):
    code: Optional[float] = Field(None, examples=[17])
    name: Optional[str] = Field(None, examples=['REAL_TIME_API_DATA_NOT_FOUND'])
    data: Optional[Dict[str, Any]] = Field(None, examples=[None])
    errorMsg: Optional[str] = Field(None, examples=['Data not found'])
