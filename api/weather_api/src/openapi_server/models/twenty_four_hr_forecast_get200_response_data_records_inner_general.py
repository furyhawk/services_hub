# coding: utf-8

"""
    Merged API Services

    This is a merged OpenAPI specification containing multiple API services

    The version of the OpenAPI document: 2025.05.17
    Contact: feedback@data.gov.sg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.twenty_four_hr_forecast_get200_response_data_records_inner_general_forecast import TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralForecast
from openapi_server.models.twenty_four_hr_forecast_get200_response_data_records_inner_general_relative_humidity import TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralRelativeHumidity
from openapi_server.models.twenty_four_hr_forecast_get200_response_data_records_inner_general_temperature import TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralTemperature
from openapi_server.models.twenty_four_hr_forecast_get200_response_data_records_inner_general_valid_period import TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralValidPeriod
from openapi_server.models.twenty_four_hr_forecast_get200_response_data_records_inner_general_wind import TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralWind
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneral(BaseModel):
    """
    A general weather forecast for the 24 hour period
    """ # noqa: E501
    valid_period: Optional[TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralValidPeriod] = Field(default=None, alias="validPeriod")
    temperature: Optional[TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralTemperature] = None
    relative_humidity: Optional[TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralRelativeHumidity] = Field(default=None, alias="relativeHumidity")
    forecast: Optional[TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralForecast] = None
    wind: Optional[TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralWind] = None
    __properties: ClassVar[List[str]] = ["validPeriod", "temperature", "relativeHumidity", "forecast", "wind"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneral from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of valid_period
        if self.valid_period:
            _dict['validPeriod'] = self.valid_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temperature
        if self.temperature:
            _dict['temperature'] = self.temperature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relative_humidity
        if self.relative_humidity:
            _dict['relativeHumidity'] = self.relative_humidity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of forecast
        if self.forecast:
            _dict['forecast'] = self.forecast.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wind
        if self.wind:
            _dict['wind'] = self.wind.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneral from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "validPeriod": TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralValidPeriod.from_dict(obj.get("validPeriod")) if obj.get("validPeriod") is not None else None,
            "temperature": TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralTemperature.from_dict(obj.get("temperature")) if obj.get("temperature") is not None else None,
            "relativeHumidity": TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralRelativeHumidity.from_dict(obj.get("relativeHumidity")) if obj.get("relativeHumidity") is not None else None,
            "forecast": TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralForecast.from_dict(obj.get("forecast")) if obj.get("forecast") is not None else None,
            "wind": TwentyFourHrForecastGet200ResponseDataRecordsInnerGeneralWind.from_dict(obj.get("wind")) if obj.get("wind") is not None else None
        })
        return _obj


