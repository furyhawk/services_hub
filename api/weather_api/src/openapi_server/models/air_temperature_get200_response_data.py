# coding: utf-8

"""
    Merged API Services

    This is a merged OpenAPI specification containing multiple API services

    The version of the OpenAPI document: 2025.05.17
    Contact: feedback@data.gov.sg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.air_temperature_get200_response_data_readings_inner import AirTemperatureGet200ResponseDataReadingsInner
from openapi_server.models.air_temperature_get200_response_data_stations_inner import AirTemperatureGet200ResponseDataStationsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AirTemperatureGet200ResponseData(BaseModel):
    """
    AirTemperatureGet200ResponseData
    """ # noqa: E501
    stations: Optional[List[AirTemperatureGet200ResponseDataStationsInner]] = None
    readings: Optional[List[AirTemperatureGet200ResponseDataReadingsInner]] = None
    reading_type: Optional[StrictStr] = Field(default=None, description="Information about the reading", alias="readingType")
    reading_unit: Optional[StrictStr] = Field(default=None, description="Measurement unit for reading", alias="readingUnit")
    pagination_token: Optional[StrictStr] = Field(default=None, description="Token to retrieve next page if exists", alias="paginationToken")
    __properties: ClassVar[List[str]] = ["stations", "readings", "readingType", "readingUnit", "paginationToken"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AirTemperatureGet200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in stations (list)
        _items = []
        if self.stations:
            for _item in self.stations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['stations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in readings (list)
        _items = []
        if self.readings:
            for _item in self.readings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['readings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AirTemperatureGet200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "stations": [AirTemperatureGet200ResponseDataStationsInner.from_dict(_item) for _item in obj.get("stations")] if obj.get("stations") is not None else None,
            "readings": [AirTemperatureGet200ResponseDataReadingsInner.from_dict(_item) for _item in obj.get("readings")] if obj.get("readings") is not None else None,
            "readingType": obj.get("readingType"),
            "readingUnit": obj.get("readingUnit"),
            "paginationToken": obj.get("paginationToken")
        })
        return _obj


